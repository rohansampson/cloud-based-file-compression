/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xzclient;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import org.apache.commons.compress.archivers.ArchiveException;

/**
 *
 * @author Rohan
 */
public class ClientJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientJFrame
     */
    File f;
    String type;
    
    public ClientJFrame() {
        initComponents();
        FormatChoose.add(XZ);
        FormatChoose.add(GZIP);
        this.setSize(550,350);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        FormatChoose = new javax.swing.ButtonGroup();
        Header = new javax.swing.JLabel();
        Msg1 = new javax.swing.JLabel();
        Browse = new javax.swing.JButton();
        Path = new javax.swing.JTextField();
        XZ = new javax.swing.JRadioButton();
        GZIP = new javax.swing.JRadioButton();
        Msg2 = new javax.swing.JLabel();
        DeleteOrig = new javax.swing.JCheckBox();
        Compress = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();

        fileChooser.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Header.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Header.setText("Client End Program");

        Msg1.setText("Please select a File");

        Browse.setText("Browse");
        Browse.setName("BrowseButton"); // NOI18N
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        Path.setText("Enter Path or Browse");
        Path.setName("Path"); // NOI18N
        Path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PathActionPerformed(evt);
            }
        });

        XZ.setSelected(true);
        XZ.setText("XZ");
        XZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XZActionPerformed(evt);
            }
        });

        GZIP.setText("GZip");
        GZIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GZIPActionPerformed(evt);
            }
        });

        Msg2.setText("Select Compresion Format");

        DeleteOrig.setText("Delete Original?");

        Compress.setText("Compress");
        Compress.setName("CompressButton"); // NOI18N
        Compress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompressActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.setName("CancelButton"); // NOI18N
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Path)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Msg1)
                            .addComponent(Msg2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(XZ)
                                .addGap(18, 18, 18)
                                .addComponent(GZIP)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DeleteOrig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(Cancel)))
                .addGap(18, 18, 18)
                .addComponent(Compress)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Browse)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(Msg1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Path))
                .addGap(28, 28, 28)
                .addComponent(Msg2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XZ)
                    .addComponent(GZIP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteOrig)
                    .addComponent(Cancel)
                    .addComponent(Compress))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void XZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XZActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_XZActionPerformed

    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == fileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            f=file;
            Path.setText(file.getPath());
        }
        else{
            System.out.println("File access cancelled by user");
        }
        
    }//GEN-LAST:event_BrowseActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_CancelActionPerformed

    private void CompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompressActionPerformed
        // TODO add your handling code here:
        if (f==null){
            JOptionPane.showMessageDialog(null,"Select a file First!");
        }
        if (XZ.isSelected()==true){
            type="XZ";
            //xz compression
        }
        else if (GZIP.isSelected()==true){
            type="GZIP";
            //gzip compression
        }       
        if (DeleteOrig.isSelected()==true){
            JOptionPane.showConfirmDialog(null,"Delete Original File?");
            try {
                if(f.delete()==true)
                    System.out.println(f.getName()+" is deleted");
            } catch (Exception e) {
                e.printStackTrace();
            }
            //delete file
        }
        
        System.out.println("STARTING TARBALL PART");
        
        try {
            TARmaker tm = new TARmaker(f);
            
            //make tarball
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArchiveException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("STARTING SENDING UNCOMPRESSED FILES PART");
        
        ClientSocket cs = new ClientSocket(f,type);
        cs.SendType();
        cs.SendSize();
        try {
            cs.SendUncompressed();
            //send files and specifications to the server
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("STARTING RECEIVING COMPRESSED FILE PART");
        
        ReceiveCompressed rc = new ReceiveCompressed();
        rc.getType();
        rc.getSize();
        try {
            rc.getCompressed();
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //all done.
        JOptionPane.showConfirmDialog(null,"File Compressed. Exit the Program?");
        System.exit(0);
        
    }//GEN-LAST:event_CompressActionPerformed

    private void PathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PathActionPerformed

    private void GZIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GZIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GZIPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton Compress;
    private javax.swing.JCheckBox DeleteOrig;
    private javax.swing.ButtonGroup FormatChoose;
    private javax.swing.JRadioButton GZIP;
    private javax.swing.JLabel Header;
    private javax.swing.JLabel Msg1;
    private javax.swing.JLabel Msg2;
    private javax.swing.JTextField Path;
    private javax.swing.JRadioButton XZ;
    private javax.swing.JFileChooser fileChooser;
    // End of variables declaration//GEN-END:variables
}
